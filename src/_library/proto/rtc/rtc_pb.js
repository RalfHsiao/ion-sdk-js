// source: proto/rtc/rtc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.rtc.Error', null, global);
goog.exportSymbol('proto.rtc.JoinReply', null, global);
goog.exportSymbol('proto.rtc.JoinRequest', null, global);
goog.exportSymbol('proto.rtc.MuteTrack', null, global);
goog.exportSymbol('proto.rtc.SessionDescription', null, global);
goog.exportSymbol('proto.rtc.Signalling', null, global);
goog.exportSymbol('proto.rtc.Signalling.PayloadCase', null, global);
goog.exportSymbol('proto.rtc.Simulcast', null, global);
goog.exportSymbol('proto.rtc.Subscription', null, global);
goog.exportSymbol('proto.rtc.SwitchScalabilityLayer', null, global);
goog.exportSymbol('proto.rtc.Target', null, global);
goog.exportSymbol('proto.rtc.Track', null, global);
goog.exportSymbol('proto.rtc.TrackEvent', null, global);
goog.exportSymbol('proto.rtc.TrackEvent.State', null, global);
goog.exportSymbol('proto.rtc.Trickle', null, global);
goog.exportSymbol('proto.rtc.UpdateSettings', null, global);
goog.exportSymbol('proto.rtc.UpdateSettings.CommandCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.JoinRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rtc.JoinRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.JoinRequest.displayName = 'proto.rtc.JoinRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.JoinReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rtc.JoinReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.JoinReply.displayName = 'proto.rtc.JoinReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.SessionDescription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rtc.SessionDescription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.SessionDescription.displayName = 'proto.rtc.SessionDescription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.Trickle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rtc.Trickle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.Trickle.displayName = 'proto.rtc.Trickle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rtc.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.Error.displayName = 'proto.rtc.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.Simulcast = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rtc.Simulcast, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.Simulcast.displayName = 'proto.rtc.Simulcast';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.Track = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rtc.Track.repeatedFields_, null);
};
goog.inherits(proto.rtc.Track, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.Track.displayName = 'proto.rtc.Track';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.TrackEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rtc.TrackEvent.repeatedFields_, null);
};
goog.inherits(proto.rtc.TrackEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.TrackEvent.displayName = 'proto.rtc.TrackEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.Subscription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rtc.Subscription.repeatedFields_, null);
};
goog.inherits(proto.rtc.Subscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.Subscription.displayName = 'proto.rtc.Subscription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.MuteTrack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rtc.MuteTrack.repeatedFields_, null);
};
goog.inherits(proto.rtc.MuteTrack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.MuteTrack.displayName = 'proto.rtc.MuteTrack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.SwitchScalabilityLayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rtc.SwitchScalabilityLayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.SwitchScalabilityLayer.displayName = 'proto.rtc.SwitchScalabilityLayer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.UpdateSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rtc.UpdateSettings.oneofGroups_);
};
goog.inherits(proto.rtc.UpdateSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.UpdateSettings.displayName = 'proto.rtc.UpdateSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.Signalling = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rtc.Signalling.oneofGroups_);
};
goog.inherits(proto.rtc.Signalling, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.Signalling.displayName = 'proto.rtc.Signalling';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.JoinRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.JoinRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.JoinRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.JoinRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    configMap: (f = msg.getConfigMap()) ? f.toObject(includeInstance, undefined) : [],
    description: (f = msg.getDescription()) && proto.rtc.SessionDescription.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.JoinRequest}
 */
proto.rtc.JoinRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.JoinRequest;
  return proto.rtc.JoinRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.JoinRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.JoinRequest}
 */
proto.rtc.JoinRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 3:
      var value = msg.getConfigMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 4:
      var value = new proto.rtc.SessionDescription;
      reader.readMessage(value,proto.rtc.SessionDescription.deserializeBinaryFromReader);
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.JoinRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.JoinRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.JoinRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.JoinRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConfigMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getDescription();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rtc.SessionDescription.serializeBinaryToWriter
    );
  }
};


/**
 * optional string sid = 1;
 * @return {string}
 */
proto.rtc.JoinRequest.prototype.getSid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.JoinRequest} returns this
 */
proto.rtc.JoinRequest.prototype.setSid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string uid = 2;
 * @return {string}
 */
proto.rtc.JoinRequest.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.JoinRequest} returns this
 */
proto.rtc.JoinRequest.prototype.setUid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, string> config = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.rtc.JoinRequest.prototype.getConfigMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.rtc.JoinRequest} returns this
 */
proto.rtc.JoinRequest.prototype.clearConfigMap = function() {
  this.getConfigMap().clear();
  return this;};


/**
 * optional SessionDescription description = 4;
 * @return {?proto.rtc.SessionDescription}
 */
proto.rtc.JoinRequest.prototype.getDescription = function() {
  return /** @type{?proto.rtc.SessionDescription} */ (
    jspb.Message.getWrapperField(this, proto.rtc.SessionDescription, 4));
};


/**
 * @param {?proto.rtc.SessionDescription|undefined} value
 * @return {!proto.rtc.JoinRequest} returns this
*/
proto.rtc.JoinRequest.prototype.setDescription = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.JoinRequest} returns this
 */
proto.rtc.JoinRequest.prototype.clearDescription = function() {
  return this.setDescription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.JoinRequest.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.JoinReply.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.JoinReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.JoinReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.JoinReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    error: (f = msg.getError()) && proto.rtc.Error.toObject(includeInstance, f),
    description: (f = msg.getDescription()) && proto.rtc.SessionDescription.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.JoinReply}
 */
proto.rtc.JoinReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.JoinReply;
  return proto.rtc.JoinReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.JoinReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.JoinReply}
 */
proto.rtc.JoinReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.rtc.Error;
      reader.readMessage(value,proto.rtc.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.rtc.SessionDescription;
      reader.readMessage(value,proto.rtc.SessionDescription.deserializeBinaryFromReader);
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.JoinReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.JoinReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.JoinReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.JoinReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rtc.Error.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rtc.SessionDescription.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.rtc.JoinReply.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rtc.JoinReply} returns this
 */
proto.rtc.JoinReply.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.rtc.Error}
 */
proto.rtc.JoinReply.prototype.getError = function() {
  return /** @type{?proto.rtc.Error} */ (
    jspb.Message.getWrapperField(this, proto.rtc.Error, 2));
};


/**
 * @param {?proto.rtc.Error|undefined} value
 * @return {!proto.rtc.JoinReply} returns this
*/
proto.rtc.JoinReply.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.JoinReply} returns this
 */
proto.rtc.JoinReply.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.JoinReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SessionDescription description = 3;
 * @return {?proto.rtc.SessionDescription}
 */
proto.rtc.JoinReply.prototype.getDescription = function() {
  return /** @type{?proto.rtc.SessionDescription} */ (
    jspb.Message.getWrapperField(this, proto.rtc.SessionDescription, 3));
};


/**
 * @param {?proto.rtc.SessionDescription|undefined} value
 * @return {!proto.rtc.JoinReply} returns this
*/
proto.rtc.JoinReply.prototype.setDescription = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.JoinReply} returns this
 */
proto.rtc.JoinReply.prototype.clearDescription = function() {
  return this.setDescription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.JoinReply.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.SessionDescription.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.SessionDescription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.SessionDescription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.SessionDescription.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sdp: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.SessionDescription}
 */
proto.rtc.SessionDescription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.SessionDescription;
  return proto.rtc.SessionDescription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.SessionDescription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.SessionDescription}
 */
proto.rtc.SessionDescription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rtc.Target} */ (reader.readEnum());
      msg.setTarget(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.SessionDescription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.SessionDescription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.SessionDescription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.SessionDescription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSdp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional Target target = 1;
 * @return {!proto.rtc.Target}
 */
proto.rtc.SessionDescription.prototype.getTarget = function() {
  return /** @type {!proto.rtc.Target} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rtc.Target} value
 * @return {!proto.rtc.SessionDescription} returns this
 */
proto.rtc.SessionDescription.prototype.setTarget = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.rtc.SessionDescription.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.SessionDescription} returns this
 */
proto.rtc.SessionDescription.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string sdp = 3;
 * @return {string}
 */
proto.rtc.SessionDescription.prototype.getSdp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.SessionDescription} returns this
 */
proto.rtc.SessionDescription.prototype.setSdp = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.Trickle.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.Trickle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.Trickle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.Trickle.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: jspb.Message.getFieldWithDefault(msg, 1, 0),
    init: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.Trickle}
 */
proto.rtc.Trickle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.Trickle;
  return proto.rtc.Trickle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.Trickle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.Trickle}
 */
proto.rtc.Trickle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rtc.Target} */ (reader.readEnum());
      msg.setTarget(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.Trickle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.Trickle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.Trickle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.Trickle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getInit();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Target target = 1;
 * @return {!proto.rtc.Target}
 */
proto.rtc.Trickle.prototype.getTarget = function() {
  return /** @type {!proto.rtc.Target} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rtc.Target} value
 * @return {!proto.rtc.Trickle} returns this
 */
proto.rtc.Trickle.prototype.setTarget = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string init = 2;
 * @return {string}
 */
proto.rtc.Trickle.prototype.getInit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.Trickle} returns this
 */
proto.rtc.Trickle.prototype.setInit = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    reason: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.Error}
 */
proto.rtc.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.Error;
  return proto.rtc.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.Error}
 */
proto.rtc.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rtc.Error.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rtc.Error} returns this
 */
proto.rtc.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string reason = 2;
 * @return {string}
 */
proto.rtc.Error.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.Error} returns this
 */
proto.rtc.Error.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.Simulcast.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.Simulcast.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.Simulcast} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.Simulcast.toObject = function(includeInstance, msg) {
  var f, obj = {
    rid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    direction: jspb.Message.getFieldWithDefault(msg, 2, ""),
    parameters: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.Simulcast}
 */
proto.rtc.Simulcast.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.Simulcast;
  return proto.rtc.Simulcast.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.Simulcast} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.Simulcast}
 */
proto.rtc.Simulcast.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirection(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.Simulcast.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.Simulcast.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.Simulcast} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.Simulcast.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDirection();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getParameters();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string rid = 1;
 * @return {string}
 */
proto.rtc.Simulcast.prototype.getRid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.Simulcast} returns this
 */
proto.rtc.Simulcast.prototype.setRid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string direction = 2;
 * @return {string}
 */
proto.rtc.Simulcast.prototype.getDirection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.Simulcast} returns this
 */
proto.rtc.Simulcast.prototype.setDirection = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string parameters = 3;
 * @return {string}
 */
proto.rtc.Simulcast.prototype.getParameters = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.Simulcast} returns this
 */
proto.rtc.Simulcast.prototype.setParameters = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rtc.Track.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.Track.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.Track.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.Track} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.Track.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    streamId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    kind: jspb.Message.getFieldWithDefault(msg, 3, ""),
    muted: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    rid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    simulcastList: jspb.Message.toObjectList(msg.getSimulcastList(),
    proto.rtc.Simulcast.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.Track}
 */
proto.rtc.Track.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.Track;
  return proto.rtc.Track.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.Track} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.Track}
 */
proto.rtc.Track.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreamId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKind(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMuted(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRid(value);
      break;
    case 6:
      var value = new proto.rtc.Simulcast;
      reader.readMessage(value,proto.rtc.Simulcast.deserializeBinaryFromReader);
      msg.addSimulcast(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.Track.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.Track.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.Track} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.Track.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStreamId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKind();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMuted();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getRid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSimulcastList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.rtc.Simulcast.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.rtc.Track.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.Track} returns this
 */
proto.rtc.Track.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string stream_id = 2;
 * @return {string}
 */
proto.rtc.Track.prototype.getStreamId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.Track} returns this
 */
proto.rtc.Track.prototype.setStreamId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string kind = 3;
 * @return {string}
 */
proto.rtc.Track.prototype.getKind = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.Track} returns this
 */
proto.rtc.Track.prototype.setKind = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool muted = 4;
 * @return {boolean}
 */
proto.rtc.Track.prototype.getMuted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rtc.Track} returns this
 */
proto.rtc.Track.prototype.setMuted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string rid = 5;
 * @return {string}
 */
proto.rtc.Track.prototype.getRid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.Track} returns this
 */
proto.rtc.Track.prototype.setRid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated Simulcast simulcast = 6;
 * @return {!Array<!proto.rtc.Simulcast>}
 */
proto.rtc.Track.prototype.getSimulcastList = function() {
  return /** @type{!Array<!proto.rtc.Simulcast>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rtc.Simulcast, 6));
};


/**
 * @param {!Array<!proto.rtc.Simulcast>} value
 * @return {!proto.rtc.Track} returns this
*/
proto.rtc.Track.prototype.setSimulcastList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.rtc.Simulcast=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rtc.Simulcast}
 */
proto.rtc.Track.prototype.addSimulcast = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.rtc.Simulcast, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rtc.Track} returns this
 */
proto.rtc.Track.prototype.clearSimulcastList = function() {
  return this.setSimulcastList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rtc.TrackEvent.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.TrackEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.TrackEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.TrackEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.TrackEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 2, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tracksList: jspb.Message.toObjectList(msg.getTracksList(),
    proto.rtc.Track.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.TrackEvent}
 */
proto.rtc.TrackEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.TrackEvent;
  return proto.rtc.TrackEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.TrackEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.TrackEvent}
 */
proto.rtc.TrackEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!proto.rtc.TrackEvent.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 4:
      var value = new proto.rtc.Track;
      reader.readMessage(value,proto.rtc.Track.deserializeBinaryFromReader);
      msg.addTracks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.TrackEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.TrackEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.TrackEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.TrackEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTracksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.rtc.Track.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.rtc.TrackEvent.State = {
  ADD: 0,
  REMOVE: 1
};

/**
 * optional State state = 2;
 * @return {!proto.rtc.TrackEvent.State}
 */
proto.rtc.TrackEvent.prototype.getState = function() {
  return /** @type {!proto.rtc.TrackEvent.State} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.rtc.TrackEvent.State} value
 * @return {!proto.rtc.TrackEvent} returns this
 */
proto.rtc.TrackEvent.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string uid = 3;
 * @return {string}
 */
proto.rtc.TrackEvent.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.TrackEvent} returns this
 */
proto.rtc.TrackEvent.prototype.setUid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Track tracks = 4;
 * @return {!Array<!proto.rtc.Track>}
 */
proto.rtc.TrackEvent.prototype.getTracksList = function() {
  return /** @type{!Array<!proto.rtc.Track>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rtc.Track, 4));
};


/**
 * @param {!Array<!proto.rtc.Track>} value
 * @return {!proto.rtc.TrackEvent} returns this
*/
proto.rtc.TrackEvent.prototype.setTracksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.rtc.Track=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rtc.Track}
 */
proto.rtc.TrackEvent.prototype.addTracks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.rtc.Track, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rtc.TrackEvent} returns this
 */
proto.rtc.TrackEvent.prototype.clearTracksList = function() {
  return this.setTracksList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rtc.Subscription.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.Subscription.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.Subscription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.Subscription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.Subscription.toObject = function(includeInstance, msg) {
  var f, obj = {
    trackidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    subscribe: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.Subscription}
 */
proto.rtc.Subscription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.Subscription;
  return proto.rtc.Subscription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.Subscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.Subscription}
 */
proto.rtc.Subscription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTrackids(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSubscribe(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.Subscription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.Subscription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.Subscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.Subscription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrackidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getSubscribe();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated string trackIds = 1;
 * @return {!Array<string>}
 */
proto.rtc.Subscription.prototype.getTrackidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.rtc.Subscription} returns this
 */
proto.rtc.Subscription.prototype.setTrackidsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.rtc.Subscription} returns this
 */
proto.rtc.Subscription.prototype.addTrackids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rtc.Subscription} returns this
 */
proto.rtc.Subscription.prototype.clearTrackidsList = function() {
  return this.setTrackidsList([]);
};


/**
 * optional bool subscribe = 2;
 * @return {boolean}
 */
proto.rtc.Subscription.prototype.getSubscribe = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rtc.Subscription} returns this
 */
proto.rtc.Subscription.prototype.setSubscribe = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rtc.MuteTrack.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.MuteTrack.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.MuteTrack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.MuteTrack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.MuteTrack.toObject = function(includeInstance, msg) {
  var f, obj = {
    trackidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    muted: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.MuteTrack}
 */
proto.rtc.MuteTrack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.MuteTrack;
  return proto.rtc.MuteTrack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.MuteTrack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.MuteTrack}
 */
proto.rtc.MuteTrack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTrackids(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMuted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.MuteTrack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.MuteTrack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.MuteTrack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.MuteTrack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrackidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getMuted();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated string trackIds = 1;
 * @return {!Array<string>}
 */
proto.rtc.MuteTrack.prototype.getTrackidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.rtc.MuteTrack} returns this
 */
proto.rtc.MuteTrack.prototype.setTrackidsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.rtc.MuteTrack} returns this
 */
proto.rtc.MuteTrack.prototype.addTrackids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rtc.MuteTrack} returns this
 */
proto.rtc.MuteTrack.prototype.clearTrackidsList = function() {
  return this.setTrackidsList([]);
};


/**
 * optional bool muted = 2;
 * @return {boolean}
 */
proto.rtc.MuteTrack.prototype.getMuted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rtc.MuteTrack} returns this
 */
proto.rtc.MuteTrack.prototype.setMuted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.SwitchScalabilityLayer.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.SwitchScalabilityLayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.SwitchScalabilityLayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.SwitchScalabilityLayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    trackid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    spatiallayer: jspb.Message.getFieldWithDefault(msg, 2, 0),
    temporallayer: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.SwitchScalabilityLayer}
 */
proto.rtc.SwitchScalabilityLayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.SwitchScalabilityLayer;
  return proto.rtc.SwitchScalabilityLayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.SwitchScalabilityLayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.SwitchScalabilityLayer}
 */
proto.rtc.SwitchScalabilityLayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrackid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSpatiallayer(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTemporallayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.SwitchScalabilityLayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.SwitchScalabilityLayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.SwitchScalabilityLayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.SwitchScalabilityLayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrackid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSpatiallayer();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTemporallayer();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string trackId = 1;
 * @return {string}
 */
proto.rtc.SwitchScalabilityLayer.prototype.getTrackid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.SwitchScalabilityLayer} returns this
 */
proto.rtc.SwitchScalabilityLayer.prototype.setTrackid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 spatialLayer = 2;
 * @return {number}
 */
proto.rtc.SwitchScalabilityLayer.prototype.getSpatiallayer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rtc.SwitchScalabilityLayer} returns this
 */
proto.rtc.SwitchScalabilityLayer.prototype.setSpatiallayer = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 temporalLayer = 3;
 * @return {number}
 */
proto.rtc.SwitchScalabilityLayer.prototype.getTemporallayer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rtc.SwitchScalabilityLayer} returns this
 */
proto.rtc.SwitchScalabilityLayer.prototype.setTemporallayer = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rtc.UpdateSettings.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.rtc.UpdateSettings.CommandCase = {
  COMMAND_NOT_SET: 0,
  SUBCRIPTION: 1,
  SWITCHLAYER: 2,
  MUTETRACK: 3
};

/**
 * @return {proto.rtc.UpdateSettings.CommandCase}
 */
proto.rtc.UpdateSettings.prototype.getCommandCase = function() {
  return /** @type {proto.rtc.UpdateSettings.CommandCase} */(jspb.Message.computeOneofCase(this, proto.rtc.UpdateSettings.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.UpdateSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.UpdateSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.UpdateSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.UpdateSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    subcription: (f = msg.getSubcription()) && proto.rtc.Subscription.toObject(includeInstance, f),
    switchlayer: (f = msg.getSwitchlayer()) && proto.rtc.SwitchScalabilityLayer.toObject(includeInstance, f),
    mutetrack: (f = msg.getMutetrack()) && proto.rtc.MuteTrack.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.UpdateSettings}
 */
proto.rtc.UpdateSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.UpdateSettings;
  return proto.rtc.UpdateSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.UpdateSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.UpdateSettings}
 */
proto.rtc.UpdateSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rtc.Subscription;
      reader.readMessage(value,proto.rtc.Subscription.deserializeBinaryFromReader);
      msg.setSubcription(value);
      break;
    case 2:
      var value = new proto.rtc.SwitchScalabilityLayer;
      reader.readMessage(value,proto.rtc.SwitchScalabilityLayer.deserializeBinaryFromReader);
      msg.setSwitchlayer(value);
      break;
    case 3:
      var value = new proto.rtc.MuteTrack;
      reader.readMessage(value,proto.rtc.MuteTrack.deserializeBinaryFromReader);
      msg.setMutetrack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.UpdateSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.UpdateSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.UpdateSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.UpdateSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubcription();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rtc.Subscription.serializeBinaryToWriter
    );
  }
  f = message.getSwitchlayer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rtc.SwitchScalabilityLayer.serializeBinaryToWriter
    );
  }
  f = message.getMutetrack();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rtc.MuteTrack.serializeBinaryToWriter
    );
  }
};


/**
 * optional Subscription subcription = 1;
 * @return {?proto.rtc.Subscription}
 */
proto.rtc.UpdateSettings.prototype.getSubcription = function() {
  return /** @type{?proto.rtc.Subscription} */ (
    jspb.Message.getWrapperField(this, proto.rtc.Subscription, 1));
};


/**
 * @param {?proto.rtc.Subscription|undefined} value
 * @return {!proto.rtc.UpdateSettings} returns this
*/
proto.rtc.UpdateSettings.prototype.setSubcription = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rtc.UpdateSettings.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.UpdateSettings} returns this
 */
proto.rtc.UpdateSettings.prototype.clearSubcription = function() {
  return this.setSubcription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.UpdateSettings.prototype.hasSubcription = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SwitchScalabilityLayer switchLayer = 2;
 * @return {?proto.rtc.SwitchScalabilityLayer}
 */
proto.rtc.UpdateSettings.prototype.getSwitchlayer = function() {
  return /** @type{?proto.rtc.SwitchScalabilityLayer} */ (
    jspb.Message.getWrapperField(this, proto.rtc.SwitchScalabilityLayer, 2));
};


/**
 * @param {?proto.rtc.SwitchScalabilityLayer|undefined} value
 * @return {!proto.rtc.UpdateSettings} returns this
*/
proto.rtc.UpdateSettings.prototype.setSwitchlayer = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rtc.UpdateSettings.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.UpdateSettings} returns this
 */
proto.rtc.UpdateSettings.prototype.clearSwitchlayer = function() {
  return this.setSwitchlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.UpdateSettings.prototype.hasSwitchlayer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MuteTrack muteTrack = 3;
 * @return {?proto.rtc.MuteTrack}
 */
proto.rtc.UpdateSettings.prototype.getMutetrack = function() {
  return /** @type{?proto.rtc.MuteTrack} */ (
    jspb.Message.getWrapperField(this, proto.rtc.MuteTrack, 3));
};


/**
 * @param {?proto.rtc.MuteTrack|undefined} value
 * @return {!proto.rtc.UpdateSettings} returns this
*/
proto.rtc.UpdateSettings.prototype.setMutetrack = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rtc.UpdateSettings.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.UpdateSettings} returns this
 */
proto.rtc.UpdateSettings.prototype.clearMutetrack = function() {
  return this.setMutetrack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.UpdateSettings.prototype.hasMutetrack = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rtc.Signalling.oneofGroups_ = [[1,2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.rtc.Signalling.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  JOIN: 1,
  REPLY: 2,
  ERROR: 3,
  DESCRIPTION: 4,
  TRICKLE: 5,
  UPDATESETTINGS: 6,
  TRACKEVENT: 7
};

/**
 * @return {proto.rtc.Signalling.PayloadCase}
 */
proto.rtc.Signalling.prototype.getPayloadCase = function() {
  return /** @type {proto.rtc.Signalling.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.rtc.Signalling.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.Signalling.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.Signalling.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.Signalling} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.Signalling.toObject = function(includeInstance, msg) {
  var f, obj = {
    join: (f = msg.getJoin()) && proto.rtc.JoinRequest.toObject(includeInstance, f),
    reply: (f = msg.getReply()) && proto.rtc.JoinReply.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.rtc.Error.toObject(includeInstance, f),
    description: (f = msg.getDescription()) && proto.rtc.SessionDescription.toObject(includeInstance, f),
    trickle: (f = msg.getTrickle()) && proto.rtc.Trickle.toObject(includeInstance, f),
    updatesettings: (f = msg.getUpdatesettings()) && proto.rtc.UpdateSettings.toObject(includeInstance, f),
    trackevent: (f = msg.getTrackevent()) && proto.rtc.TrackEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.Signalling}
 */
proto.rtc.Signalling.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.Signalling;
  return proto.rtc.Signalling.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.Signalling} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.Signalling}
 */
proto.rtc.Signalling.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rtc.JoinRequest;
      reader.readMessage(value,proto.rtc.JoinRequest.deserializeBinaryFromReader);
      msg.setJoin(value);
      break;
    case 2:
      var value = new proto.rtc.JoinReply;
      reader.readMessage(value,proto.rtc.JoinReply.deserializeBinaryFromReader);
      msg.setReply(value);
      break;
    case 3:
      var value = new proto.rtc.Error;
      reader.readMessage(value,proto.rtc.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 4:
      var value = new proto.rtc.SessionDescription;
      reader.readMessage(value,proto.rtc.SessionDescription.deserializeBinaryFromReader);
      msg.setDescription(value);
      break;
    case 5:
      var value = new proto.rtc.Trickle;
      reader.readMessage(value,proto.rtc.Trickle.deserializeBinaryFromReader);
      msg.setTrickle(value);
      break;
    case 6:
      var value = new proto.rtc.UpdateSettings;
      reader.readMessage(value,proto.rtc.UpdateSettings.deserializeBinaryFromReader);
      msg.setUpdatesettings(value);
      break;
    case 7:
      var value = new proto.rtc.TrackEvent;
      reader.readMessage(value,proto.rtc.TrackEvent.deserializeBinaryFromReader);
      msg.setTrackevent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.Signalling.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.Signalling.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.Signalling} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.Signalling.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJoin();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rtc.JoinRequest.serializeBinaryToWriter
    );
  }
  f = message.getReply();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rtc.JoinReply.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rtc.Error.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rtc.SessionDescription.serializeBinaryToWriter
    );
  }
  f = message.getTrickle();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rtc.Trickle.serializeBinaryToWriter
    );
  }
  f = message.getUpdatesettings();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rtc.UpdateSettings.serializeBinaryToWriter
    );
  }
  f = message.getTrackevent();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rtc.TrackEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional JoinRequest join = 1;
 * @return {?proto.rtc.JoinRequest}
 */
proto.rtc.Signalling.prototype.getJoin = function() {
  return /** @type{?proto.rtc.JoinRequest} */ (
    jspb.Message.getWrapperField(this, proto.rtc.JoinRequest, 1));
};


/**
 * @param {?proto.rtc.JoinRequest|undefined} value
 * @return {!proto.rtc.Signalling} returns this
*/
proto.rtc.Signalling.prototype.setJoin = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rtc.Signalling.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.Signalling} returns this
 */
proto.rtc.Signalling.prototype.clearJoin = function() {
  return this.setJoin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.Signalling.prototype.hasJoin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional JoinReply reply = 2;
 * @return {?proto.rtc.JoinReply}
 */
proto.rtc.Signalling.prototype.getReply = function() {
  return /** @type{?proto.rtc.JoinReply} */ (
    jspb.Message.getWrapperField(this, proto.rtc.JoinReply, 2));
};


/**
 * @param {?proto.rtc.JoinReply|undefined} value
 * @return {!proto.rtc.Signalling} returns this
*/
proto.rtc.Signalling.prototype.setReply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rtc.Signalling.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.Signalling} returns this
 */
proto.rtc.Signalling.prototype.clearReply = function() {
  return this.setReply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.Signalling.prototype.hasReply = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Error error = 3;
 * @return {?proto.rtc.Error}
 */
proto.rtc.Signalling.prototype.getError = function() {
  return /** @type{?proto.rtc.Error} */ (
    jspb.Message.getWrapperField(this, proto.rtc.Error, 3));
};


/**
 * @param {?proto.rtc.Error|undefined} value
 * @return {!proto.rtc.Signalling} returns this
*/
proto.rtc.Signalling.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rtc.Signalling.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.Signalling} returns this
 */
proto.rtc.Signalling.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.Signalling.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SessionDescription description = 4;
 * @return {?proto.rtc.SessionDescription}
 */
proto.rtc.Signalling.prototype.getDescription = function() {
  return /** @type{?proto.rtc.SessionDescription} */ (
    jspb.Message.getWrapperField(this, proto.rtc.SessionDescription, 4));
};


/**
 * @param {?proto.rtc.SessionDescription|undefined} value
 * @return {!proto.rtc.Signalling} returns this
*/
proto.rtc.Signalling.prototype.setDescription = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rtc.Signalling.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.Signalling} returns this
 */
proto.rtc.Signalling.prototype.clearDescription = function() {
  return this.setDescription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.Signalling.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Trickle trickle = 5;
 * @return {?proto.rtc.Trickle}
 */
proto.rtc.Signalling.prototype.getTrickle = function() {
  return /** @type{?proto.rtc.Trickle} */ (
    jspb.Message.getWrapperField(this, proto.rtc.Trickle, 5));
};


/**
 * @param {?proto.rtc.Trickle|undefined} value
 * @return {!proto.rtc.Signalling} returns this
*/
proto.rtc.Signalling.prototype.setTrickle = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.rtc.Signalling.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.Signalling} returns this
 */
proto.rtc.Signalling.prototype.clearTrickle = function() {
  return this.setTrickle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.Signalling.prototype.hasTrickle = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional UpdateSettings updateSettings = 6;
 * @return {?proto.rtc.UpdateSettings}
 */
proto.rtc.Signalling.prototype.getUpdatesettings = function() {
  return /** @type{?proto.rtc.UpdateSettings} */ (
    jspb.Message.getWrapperField(this, proto.rtc.UpdateSettings, 6));
};


/**
 * @param {?proto.rtc.UpdateSettings|undefined} value
 * @return {!proto.rtc.Signalling} returns this
*/
proto.rtc.Signalling.prototype.setUpdatesettings = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.rtc.Signalling.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.Signalling} returns this
 */
proto.rtc.Signalling.prototype.clearUpdatesettings = function() {
  return this.setUpdatesettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.Signalling.prototype.hasUpdatesettings = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional TrackEvent trackEvent = 7;
 * @return {?proto.rtc.TrackEvent}
 */
proto.rtc.Signalling.prototype.getTrackevent = function() {
  return /** @type{?proto.rtc.TrackEvent} */ (
    jspb.Message.getWrapperField(this, proto.rtc.TrackEvent, 7));
};


/**
 * @param {?proto.rtc.TrackEvent|undefined} value
 * @return {!proto.rtc.Signalling} returns this
*/
proto.rtc.Signalling.prototype.setTrackevent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.rtc.Signalling.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.Signalling} returns this
 */
proto.rtc.Signalling.prototype.clearTrackevent = function() {
  return this.setTrackevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.Signalling.prototype.hasTrackevent = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * @enum {number}
 */
proto.rtc.Target = {
  PUBLISHER: 0,
  SUBSCRIBER: 1
};

goog.object.extend(exports, proto.rtc);
